<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd"
>
	
	<!-- 맨 저음 설정 시 테스트 -->
	<!-- 
	<http pattern="/" security="none"></http>
	<http pattern="/**" security="none"></http>
	-->
	
	<!-- auto-config="true"는 form기반으로 로그인하고 use-expressions="true"는 spring의 EL언어 사용 -->
	<http auto-config="true" use-expressions="true">
		<access-denied-handler error-page="/main"/> <!-- 로그인 이후 금지된 요청(다시 로그인페이지로, 회원가입 등) -->
		
	<!-- security에서는 기본적으로 iframe사용을 제한하는데 이를 풀기위함 -->
		<headers>
			<frame-options disabled="true"></frame-options>
		</headers>
		
	<!-- 각 요청별 권한 지정은 intercept-url태그 사용 지정 -->
	<!-- pattern은 요청경로 속성, access는 접근 대상 지정 -->
		<intercept-url pattern="/about" access="permitAll"/>
		<intercept-url pattern="/" access="permitAll"/> <!-- 첫페이지는 모두 접근가능(로그인 포함하여 모두 접근) -->
		<intercept-url pattern="/home/**" access="isAnonymous()"/>
		<intercept-url pattern="/images/**" access="permitAll"/>
		<intercept-url pattern="/processLogin" access="permitAll"/> <!-- 로그인 실패시 요청 경로 -->
		<intercept-url pattern="/gredirect" access="isAnonymous()"/>
		<intercept-url pattern="/nredirect" access="isAnonymous()"/>
		<intercept-url pattern="/kredirect" access="isAnonymous()"/>
		<intercept-url pattern="/loginView" access="isAnonymous()"/> <!-- 로그인창 이동요청 -->
		<intercept-url pattern="/joinView" access="isAnonymous()"/> <!-- 회원가입창 이동요청 -->
		<intercept-url pattern="/join" access="isAnonymous()"/>
		<intercept-url pattern="/login" access="isAnonymous()"/> <!-- 로그인을 안한 사람만 접근 -->
		<intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_MANAGE')" requires-channel="https"/>
	
	<!-- 모든 요청이 로그인 성공 후 접근가능 -->
	<!-- intercept-url 우선순위는 위에 있을수록 높음 -->
	<!-- isAnonymous()나 hasRole()은 spring EL제공 메서드 -->
	<!-- Role등급은 ROLE_USER, ROLE_ADMIN, ROLE_MANAGE 등이 있음 -->
	<!-- requires-channel="https"는 https 접근 -->
	<!-- auth등급이 하나이면 hasRole()사용, 여러개는 hasAnyRole()사용 -->
	
	<!-- form-login은 로그인 관련사항 설정 -->
	<!-- 미로그인자가 로그인 이후 접속 가능한 페이지 접속시도는 /loginView로 요청 -->
		<form-login
				login-processing-url = "/login"
				login-page="/loginView"
				username-parameter="pid"
				password-parameter="ppw"
				default-target-url="/main"
				authentication-failure-url="/processLogin?error=1"
				always-use-default-target="true"
		/>
	<!-- 
			form-login태그는 로그인 관련사항 설정하며 속성으로 처리
			html form에서 action속성 값으로 기본값은 login이며 이때는 action="login"
			login-processing-url 속성은 login요청경로이며 /login시는 생략
			login-page속성은 로그인 창의 요청경로
			username-parameter는 form에서 id를 나타내는 name속성 값 input type="text" name="pid"
			default-target-url속성은 로그인 성공시 이동할 요청경로
			authentication-failure-url속성은 로그인인증 실패시 요청경로
			always-use-default-target속성은 성공시 가는 default-target-url="/main"를 확실히 보장해주기 위해 설정
		 -->
		 
	<!-- logout태그는 로그아웃처리(스프링에서는 로그아웃도 form을 이용해 해야함) -->
		 <logout invalidate-session="true" logout-url="/logout"
		 				logout-success-url="/processLogin?logout=1" delete-cookies="JSESSIONID, remember-me"/>
	<!-- invalidate-session="true"는 세션 초기화 logout-url="/logout"은 로그아웃처리경로 logout-success-rul은 로그아웃 이후 요청경로 -->
	<!-- delete-cookies는 쿠키삭제 기본인 JSESSIONID와 remember-me시 사용하는 remember-me 쿠키 삭제  -->
		 
	<!-- 명시적으로 로그아웃하지 않았을때 다시 사이트 입장하면 로그인상태 유지됨 -->
		 <remember-me remember-me-parameter="remeber-me" remember-me-cookie="remember-me" key="kykskey" token-validity-seconds="3600"/>
		 
	<!-- 사이트 간 요청 위조 CSRF(Cross-site Request Forgery)는 다른 사이트에서 페이지를 위조하여 접근하는 해킹을 말하며 spring security는 이를 예방할 수 있다.-->
		 <csrf disabled="false"/> <!-- 기본값으로 csrf예방기능 동작 -->
	<!-- default는 false이며 true로 해야 ajax와 파일업로드 됨 -->
	<!-- 그러나 input type="hidden"으로 csrf보내면 false일때도 됨 -->
	<!-- 단, file업로드시 input으로 처리하지 않고 action뒤에 csrf를 주면되고 form이 아닌 링크 a는 get방식으로 ajax로 보냄 -->
	</http>
	
	<!-- DB이용 인증처리(authentication) -->
	<authentication-manager>
		<authentication-provider user-service-ref="customUserDetailsService">
				<password-encoder ref="passwordEncoder"/>
		</authentication-provider>
	</authentication-manager>
	<!-- 인증처리 클래스로 인터페이스를 구현한 클래스로 개발자가 만듬 -->
	<beans:bean id="customUserDetailsService" class="com.kyk.ezenPJT.security.CustomUserDetailsService"/>
	<!-- 암호화 된 패스워드 처리 빈 -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans:beans>